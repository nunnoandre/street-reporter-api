// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StreetReporterAPI.Infrastructure.Data;

#nullable disable

namespace StreetReporterAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241027204301_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ConclusionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IncidentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IncidentStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ResponsibleOrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IncidentCategoryId");

                    b.HasIndex("IncidentStatusId");

                    b.HasIndex("ResponsibleOrganizationId");

                    b.ToTable("Incidents");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.IncidentCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IncidentCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "None"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Road"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "SideWalk"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Square"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "PlayGround"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Garden"
                        });
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.IncidentMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId");

                    b.HasIndex("UserId");

                    b.ToTable("IncidentsMessages");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.IncidentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IncidentStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Aknowledged"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Done"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Aborted"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Archived"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Affected"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "NotAffected"
                        });
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.Municipality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.Parish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("MunicipalityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MunicipalityId");

                    b.ToTable("Parishes");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("PublicOrganizationTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PublicOrganizationTypeId");

                    b.ToTable("PublicOrganizations");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganizationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicOrganizationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Municipality"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Parish"
                        });
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Reports.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ConclusionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasImages")
                        .HasColumnType("bit");

                    b.Property<long>("IncidentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IncidentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<long>("ReportStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReporterId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResponsibleOrganizationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IncidentCategoryId");

                    b.HasIndex("IncidentId");

                    b.HasIndex("ReportStatusId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("ResponsibleOrganizationId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Reports.ReportStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReportsStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Opened"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Taken"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Refused"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "InProgress"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Done"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Archived"
                        });
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("NIF")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("NIF");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Reporter"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.Incident", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Incidents.IncidentCategory", "Category")
                        .WithMany()
                        .HasForeignKey("IncidentCategoryId");

                    b.HasOne("StreetReporterAPI.Domain.Entities.Incidents.IncidentStatus", "Status")
                        .WithMany()
                        .HasForeignKey("IncidentStatusId");

                    b.HasOne("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganization", "ResponsibleOrganization")
                        .WithMany()
                        .HasForeignKey("ResponsibleOrganizationId");

                    b.Navigation("Category");

                    b.Navigation("ResponsibleOrganization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.IncidentMessage", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Incidents.Incident", "Incident")
                        .WithMany("Messages")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetReporterAPI.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.Parish", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Organizations.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId");

                    b.Navigation("Municipality");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganization", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganizationType", "Type")
                        .WithMany()
                        .HasForeignKey("PublicOrganizationTypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Reports.Report", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Incidents.IncidentCategory", "Category")
                        .WithMany()
                        .HasForeignKey("IncidentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetReporterAPI.Domain.Entities.Incidents.Incident", "Incident")
                        .WithMany("Reports")
                        .HasForeignKey("IncidentId");

                    b.HasOne("StreetReporterAPI.Domain.Entities.Reports.ReportStatus", "Status")
                        .WithMany()
                        .HasForeignKey("ReportStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StreetReporterAPI.Domain.Entities.Users.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId");

                    b.HasOne("StreetReporterAPI.Domain.Entities.Organizations.PublicOrganization", "ResponsibleOrganization")
                        .WithMany()
                        .HasForeignKey("ResponsibleOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Incident");

                    b.Navigation("Reporter");

                    b.Navigation("ResponsibleOrganization");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("StreetReporterAPI.Domain.Entities.Users.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("UserRoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StreetReporterAPI.Domain.Entities.Incidents.Incident", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
